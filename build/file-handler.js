'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _fs = require('fs');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _nodeUtils = require('node-utils');

var _moduleMap = require('./module-map');

var _moduleMap2 = _interopRequireDefault(_moduleMap);

var _fsUtils = require('./fs-utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const { genNull, genAllNull } = _nodeUtils.genAwait;

const { lstat, readFile } = _nodeUtils.fsAsync;
const PROVIDES_MODULE_RX = /^\s*(?:\*|\/\/)\s*@providesModule\s*(\S+)$/m;

let FileHandler = class FileHandler {

  constructor(__filePath) {
    this.__filePath = __filePath;
  }

  getFilePath() {
    return this.__filePath;
  }

  // eslint-disable-next-line require-await
  async exists() {
    return (0, _fsUtils.exists)(this.__filePath);
  }

  async canProcess() {
    const stats = await this.genStats();
    if (stats.isSymbolicLink()) {
      return false;
    }

    if (!stats.isFile()) {
      throw new _nodeUtils.Err(`Attempting to process ${this.__filePath}, but it is not a file.`);
    }

    return true;
  }

  // eslint-disable-next-line require-await
  async genStats() {
    return lstat(this.__filePath);
  }

  async genProjectDir() {
    const splitPath = this.__filePath.split(_path2.default.sep);
    for (let i = splitPath.length - 1; i >= 0; i--) {
      const dir = splitPath.slice(0, i);
      const packageJSONPath = _path2.default.resolve('/', ...dir, 'package.json');
      const packageJsonExists = await genNull((0, _fsUtils.exists)(packageJSONPath));

      if (packageJsonExists) {
        return _path2.default.resolve('/', ...dir);
      }
    }
  }

  async genWorkspaceDir() {
    const { sep } = _path2.default;
    const parentDirs = _path2.default.dirname(this.__filePath).split(sep);

    while (parentDirs.length > 0) {
      const packageJSONPath = _path2.default.resolve('/', ...parentDirs, 'package.json');
      const packageJSONExists = await (0, _fsUtils.exists)(packageJSONPath);

      if (packageJSONExists) {
        try {
          const json = require(packageJSONPath);

          if (json.private && json.workspaces) {
            return _path2.default.resolve('/', ...parentDirs);
          }
        } catch (err) {
          // intentionally empty
        }
      }
      parentDirs.pop();
    }
  }

  async genModuleName() {
    const fileContents = await genNull(readFile(this.__filePath));
    const matches = PROVIDES_MODULE_RX.exec(fileContents || '');

    return matches ? matches[1] : null;
  }

  async genProjectModuleMap() {
    const projectDir = await genNull(this.genProjectDir());

    if (!projectDir) {
      throw new _nodeUtils.Err(`Could not get project module map for ${this.__filePath} because no project was found`);
    }

    return new _moduleMap2.default(projectDir);
  }

  async genWorkspaceModuleMap() {
    const workspaceDir = await genNull(this.genWorkspaceDir());

    if (!workspaceDir) {
      throw new _nodeUtils.Err(`Could not get workspace module map for ${this.__filePath} because no workspace was found`);
    }

    return new _moduleMap2.default(workspaceDir);
  }

  async genModuleMaps() {
    const moduleMaps = await genAllNull(this.genWorkspaceModuleMap(), this.genProjectModuleMap());

    return moduleMaps.filter(Boolean);
  }
};
exports.default = FileHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,