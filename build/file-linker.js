'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

require('source-map-support/register');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _nodeUtils = require('node-utils');

var _fsUtils = require('./fs-utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const { every: everyAsync } = _nodeUtils.arrayAsync;

const { lstat, mkdirp, unlink, dirIsEmpty, rmdir } = _nodeUtils.fsAsync;
const { gen, genAllNull } = _nodeUtils.genAwait;

const MODULE_SEPERATOR = '/';

async function isSymbolicLink(modulePath) {
  const [err, stat] = await gen(lstat(modulePath));

  if (err || !stat) return false;

  return stat.isSymbolicLink();
}

let FileLinker = class FileLinker {

  constructor(projectRoot) {
    this.projectRoot = projectRoot;
    this.nodeModulesPath = _path2.default.resolve(projectRoot, 'node_modules');
  }

  async canAdd(moduleName, modulePath) {
    const linkPath = _path2.default.resolve(this.nodeModulesPath, moduleName);
    const [stats, currentTarget] = await genAllNull(lstat(linkPath), (0, _fsUtils.readSymlinkTarget)(linkPath));

    if (stats && !stats.isSymbolicLink()) {
      return `${moduleName} already exists and is not a symlink`;
    }

    if (currentTarget && currentTarget !== modulePath) {
      return `${moduleName} is already linked to ${currentTarget}`;
    }

    const moduleContainsFolders = moduleName.indexOf(MODULE_SEPERATOR) >= 0;
    if (moduleContainsFolders) {
      const moduleParts = moduleName.split(MODULE_SEPERATOR);
      const folderParts = moduleParts.slice(0, -1);

      const allPartsAreFolders = await everyAsync(folderParts, async (current, index) => {
        const folders = folderParts.slice(0, index + 1);
        const folderPath = _path2.default.resolve(this.nodeModulesPath, ...folders);
        const [folderExists, folderStats] = await genAllNull((0, _fsUtils.exists)(folderPath), lstat(folderPath));

        if (!folderExists || folderStats && folderStats.isDirectory()) return true;

        return false;
      }, '');

      if (!allPartsAreFolders) {
        return `Some parts of ${moduleName} already exist and are not directories`;
      }
    }

    return true;
  }

  async canRemove(moduleName) {
    const modulePath = _path2.default.resolve(this.nodeModulesPath, moduleName);
    const [fileExists, isSymLink] = await genAllNull((0, _fsUtils.exists)(modulePath), isSymbolicLink(modulePath));
    return !fileExists || !!isSymLink;
  }

  async add(moduleName, modulePath) {
    const linkPath = _path2.default.resolve(this.nodeModulesPath, moduleName);
    const [canAdd, existingTarget] = await genAllNull(this.canAdd(moduleName, modulePath), (0, _fsUtils.readSymlinkTarget)(linkPath));

    if (existingTarget && existingTarget === modulePath) return;
    if (!canAdd) {
      throw new Error(`can not link module ${moduleName} to ${modulePath}`);
    }

    const moduleContainsFolders = moduleName.indexOf(MODULE_SEPERATOR) >= 0;
    if (moduleContainsFolders) {
      const moduleParts = moduleName.split(MODULE_SEPERATOR);
      const folderParts = moduleParts.slice(0, -1);
      const folder = _path2.default.resolve(this.nodeModulesPath, ...folderParts);

      await mkdirp(folder);
    }

    await (0, _fsUtils.linkFile)(modulePath, linkPath);
  }

  async removeModule(moduleName) {
    const canRemoveModule = await this.canRemove(moduleName);

    if (!canRemoveModule) {
      throw new Error(`can not unlink module ${moduleName}`);
    }

    const linkPath = _path2.default.resolve(this.nodeModulesPath, moduleName);
    const fileExists = await (0, _fsUtils.exists)(linkPath);

    if (fileExists) {
      await unlink(linkPath);

      const moduleContainsFolders = moduleName.indexOf(MODULE_SEPERATOR) >= 0;
      if (moduleContainsFolders) {
        const moduleParts = moduleName.split(MODULE_SEPERATOR);
        const folderParts = moduleParts.slice(0, -1);

        for (let i = folderParts.length - 1; i >= 0; i--) {
          const dirPath = _path2.default.resolve(this.nodeModulesPath, ...folderParts.slice(0, i + 1));
          const isEmpty = await dirIsEmpty(dirPath);

          if (isEmpty) {
            await rmdir(dirPath);
          }
        }
      }
    }
  }
};
exports.default = FileLinker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,