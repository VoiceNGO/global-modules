'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.readSymlinkTarget = readSymlinkTarget;
exports.linkFile = linkFile;
exports.exists = exists;
exports.getBuildPath = getBuildPath;

require('source-map-support/register');

const path = require('path');

const { genNull } = require('node-utils').genAwait;
const { lstat, readlink, symlink } = require('node-utils').fsAsync;
const { replaceLastOccurrence } = require('node-utils').string;

const SRC_DIRECTORY = 'src';
const BUILD_DIRECTORY = 'build';

async function readSymlinkTarget(filePath) {
  if (!(await exists(filePath))) {
    return null;
  }

  const stat = await lstat(filePath);
  if (!stat.isSymbolicLink()) {
    return null;
  }

  const linkTarget = await readlink(filePath);
  const resolvedLink = path.resolve(path.dirname(filePath), linkTarget);

  return resolvedLink;
}

async function linkFile(realPath, linkPath) {
  try {
    await symlink(realPath, linkPath);
  } catch (err) {
    throw new Error(`Could not create symlink because ${err}.`);
  }
}

async function exists(filePath) {
  const hasStats = await genNull(lstat(filePath));
  return hasStats !== null;
}

function getBuildPath(filePath) {
  return replaceLastOccurrence(filePath, `${path.sep}${SRC_DIRECTORY}${path.sep}`, `${path.sep}${BUILD_DIRECTORY}${path.sep}`);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9mcy11dGlscy5qcyJdLCJuYW1lcyI6WyJyZWFkU3ltbGlua1RhcmdldCIsImxpbmtGaWxlIiwiZXhpc3RzIiwiZ2V0QnVpbGRQYXRoIiwicGF0aCIsInJlcXVpcmUiLCJnZW5OdWxsIiwiZ2VuQXdhaXQiLCJsc3RhdCIsInJlYWRsaW5rIiwic3ltbGluayIsImZzQXN5bmMiLCJyZXBsYWNlTGFzdE9jY3VycmVuY2UiLCJzdHJpbmciLCJTUkNfRElSRUNUT1JZIiwiQlVJTERfRElSRUNUT1JZIiwiZmlsZVBhdGgiLCJzdGF0IiwiaXNTeW1ib2xpY0xpbmsiLCJsaW5rVGFyZ2V0IiwicmVzb2x2ZWRMaW5rIiwicmVzb2x2ZSIsImRpcm5hbWUiLCJyZWFsUGF0aCIsImxpbmtQYXRoIiwiZXJyIiwiRXJyb3IiLCJoYXNTdGF0cyIsInNlcCJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFhc0JBLGlCLEdBQUFBLGlCO1FBZ0JBQyxRLEdBQUFBLFE7UUFRQUMsTSxHQUFBQSxNO1FBS05DLFksR0FBQUEsWTs7OztBQXhDaEIsTUFBTUMsT0FBT0MsUUFBUSxNQUFSLENBQWI7O0FBRUEsTUFBTSxFQUFFQyxPQUFGLEtBQWNELFFBQVEsWUFBUixFQUFzQkUsUUFBMUM7QUFDQSxNQUFNLEVBQUVDLEtBQUYsRUFBU0MsUUFBVCxFQUFtQkMsT0FBbkIsS0FBK0JMLFFBQVEsWUFBUixFQUFzQk0sT0FBM0Q7QUFDQSxNQUFNLEVBQUVDLHFCQUFGLEtBQTRCUCxRQUFRLFlBQVIsRUFBc0JRLE1BQXhEOztBQUlBLE1BQU1DLGdCQUFnQixLQUF0QjtBQUNBLE1BQU1DLGtCQUFrQixPQUF4Qjs7QUFFTyxlQUFlZixpQkFBZixDQUFpQ2dCLFFBQWpDLEVBQXlGO0FBQzlGLE1BQUksRUFBRSxNQUFNZCxPQUFPYyxRQUFQLENBQVIsQ0FBSixFQUErQjtBQUM3QixXQUFPLElBQVA7QUFDRDs7QUFFRCxRQUFNQyxPQUFPLE1BQU1ULE1BQU1RLFFBQU4sQ0FBbkI7QUFDQSxNQUFJLENBQUNDLEtBQUtDLGNBQUwsRUFBTCxFQUE0QjtBQUMxQixXQUFPLElBQVA7QUFDRDs7QUFFRCxRQUFNQyxhQUFhLE1BQU1WLFNBQVNPLFFBQVQsQ0FBekI7QUFDQSxRQUFNSSxlQUFlaEIsS0FBS2lCLE9BQUwsQ0FBYWpCLEtBQUtrQixPQUFMLENBQWFOLFFBQWIsQ0FBYixFQUFxQ0csVUFBckMsQ0FBckI7O0FBRUEsU0FBT0MsWUFBUDtBQUNEOztBQUVNLGVBQWVuQixRQUFmLENBQXdCc0IsUUFBeEIsRUFBaURDLFFBQWpELEVBQTBFO0FBQy9FLE1BQUk7QUFDRixVQUFNZCxRQUFRYSxRQUFSLEVBQWtCQyxRQUFsQixDQUFOO0FBQ0QsR0FGRCxDQUVFLE9BQU9DLEdBQVAsRUFBWTtBQUNaLFVBQU0sSUFBSUMsS0FBSixDQUFXLG9DQUFtQ0QsR0FBSSxHQUFsRCxDQUFOO0FBQ0Q7QUFDRjs7QUFFTSxlQUFldkIsTUFBZixDQUFzQmMsUUFBdEIsRUFBaUU7QUFDdEUsUUFBTVcsV0FBVyxNQUFNckIsUUFBUUUsTUFBTVEsUUFBTixDQUFSLENBQXZCO0FBQ0EsU0FBT1csYUFBYSxJQUFwQjtBQUNEOztBQUVNLFNBQVN4QixZQUFULENBQWlDYSxRQUFqQyxFQUFpRDtBQUN0RCxTQUFPSixzQkFDTEksUUFESyxFQUVKLEdBQUVaLEtBQUt3QixHQUFJLEdBQUVkLGFBQWMsR0FBRVYsS0FBS3dCLEdBQUksRUFGbEMsRUFHSixHQUFFeEIsS0FBS3dCLEdBQUksR0FBRWIsZUFBZ0IsR0FBRVgsS0FBS3dCLEdBQUksRUFIcEMsQ0FBUDtBQUtEIiwiZmlsZSI6ImZzLXV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuY29uc3QgeyBnZW5OdWxsIH0gPSByZXF1aXJlKCdub2RlLXV0aWxzJykuZ2VuQXdhaXQ7XG5jb25zdCB7IGxzdGF0LCByZWFkbGluaywgc3ltbGluayB9ID0gcmVxdWlyZSgnbm9kZS11dGlscycpLmZzQXN5bmM7XG5jb25zdCB7IHJlcGxhY2VMYXN0T2NjdXJyZW5jZSB9ID0gcmVxdWlyZSgnbm9kZS11dGlscycpLnN0cmluZztcblxuaW1wb3J0IHR5cGUgeyB0QWJzb2x1dGVQYXRoIH0gZnJvbSAnZmxvdy10eXBlcyc7XG5cbmNvbnN0IFNSQ19ESVJFQ1RPUlkgPSAnc3JjJztcbmNvbnN0IEJVSUxEX0RJUkVDVE9SWSA9ICdidWlsZCc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWFkU3ltbGlua1RhcmdldChmaWxlUGF0aDogdEFic29sdXRlUGF0aCk6IFByb21pc2U8dEFic29sdXRlUGF0aCB8IG51bGw+IHtcbiAgaWYgKCEoYXdhaXQgZXhpc3RzKGZpbGVQYXRoKSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IHN0YXQgPSBhd2FpdCBsc3RhdChmaWxlUGF0aCk7XG4gIGlmICghc3RhdC5pc1N5bWJvbGljTGluaygpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBsaW5rVGFyZ2V0ID0gYXdhaXQgcmVhZGxpbmsoZmlsZVBhdGgpO1xuICBjb25zdCByZXNvbHZlZExpbmsgPSBwYXRoLnJlc29sdmUocGF0aC5kaXJuYW1lKGZpbGVQYXRoKSwgbGlua1RhcmdldCk7XG5cbiAgcmV0dXJuIHJlc29sdmVkTGluaztcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxpbmtGaWxlKHJlYWxQYXRoOiB0QWJzb2x1dGVQYXRoLCBsaW5rUGF0aDogdEFic29sdXRlUGF0aCkge1xuICB0cnkge1xuICAgIGF3YWl0IHN5bWxpbmsocmVhbFBhdGgsIGxpbmtQYXRoKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgY3JlYXRlIHN5bWxpbmsgYmVjYXVzZSAke2Vycn0uYCk7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGV4aXN0cyhmaWxlUGF0aDogdEFic29sdXRlUGF0aCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICBjb25zdCBoYXNTdGF0cyA9IGF3YWl0IGdlbk51bGwobHN0YXQoZmlsZVBhdGgpKTtcbiAgcmV0dXJuIGhhc1N0YXRzICE9PSBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnVpbGRQYXRoPFQ6IHN0cmluZz4oZmlsZVBhdGg6IFQpOiBUIHtcbiAgcmV0dXJuIHJlcGxhY2VMYXN0T2NjdXJyZW5jZShcbiAgICBmaWxlUGF0aCxcbiAgICBgJHtwYXRoLnNlcH0ke1NSQ19ESVJFQ1RPUll9JHtwYXRoLnNlcH1gLFxuICAgIGAke3BhdGguc2VwfSR7QlVJTERfRElSRUNUT1JZfSR7cGF0aC5zZXB9YCxcbiAgKTtcbn1cbiJdfQ==