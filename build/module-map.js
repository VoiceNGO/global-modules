'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _desc, _value, _class;

require('source-map-support/register');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _nodeUtils = require('node-utils');

var _fsUtils = require('./fs-utils');

var _memoizedDecorator = require('memoized-decorator');

var _memoizedDecorator2 = _interopRequireDefault(_memoizedDecorator);

var _flowTypes = require('flow-types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

const { readFile, writeFile } = _nodeUtils.fsAsync;
const { gen, genAllNull } = _nodeUtils.genAwait;

function sortObject(obj) {
  const newObj = {};
  const keys = Object.keys(obj);
  keys.sort().forEach(key => newObj[key] = obj[key]);
  return newObj;
}

let ModuleMap = (_class = class ModuleMap {

  constructor(projectRoot) {
    this.projectRoot = projectRoot;
    this.moduleMapPath = _path2.default.join(projectRoot, 'module-map.json');
  }

  async load() {
    const moduleMapExists = await (0, _fsUtils.exists)(this.moduleMapPath);

    if (moduleMapExists) {
      this.moduleMap = JSON.parse((await readFile(this.moduleMapPath)));
    } else {
      this.moduleMap = {};
      await this.write();
    }
  }

  async write() {
    const moduleJSON = JSON.stringify(this.moduleMap, null, 2);
    const [err] = await gen(writeFile(this.moduleMapPath, moduleJSON));

    if (err) {
      throw new _nodeUtils.Err(`Failed to write module map to ${this.moduleMapPath} because ${_nodeUtils.Err.printable(err)}`);
    }
  }

  getProjectRoot() {
    return this.projectRoot;
  }

  getModuleMapPath() {
    return this.moduleMapPath;
  }

  async __genModulePath(moduleName) {
    await this.load();

    return this.moduleMap[moduleName];
  }

  async __genAbsoluteModulePath(moduleName) {
    const relModulePath = await this.__genModulePath(moduleName);

    if (!relModulePath) return null;

    return _path2.default.join(this.projectRoot, relModulePath);
  }

  __genRelativePath(absPath) {
    const relPath = _path2.default.relative(this.projectRoot, absPath);

    if (relPath.indexOf('..') >= 0) {
      throw new _nodeUtils.Err(`ModuleMap.__genRelativePath called with a path outside of the project root`);
    }

    return relPath;
  }

  async __clean(moduleName) {
    await this.load();

    const absModulePath = await this.__genAbsoluteModulePath(moduleName);
    if (!absModulePath) return;

    const linkedModuleExists = await (0, _fsUtils.exists)(absModulePath);
    if (linkedModuleExists) return;

    await this.removeModule(moduleName);
  }

  async canAdd(moduleName, modulePath) {
    await genAllNull(this.load(), this.__clean(moduleName));

    const relativeModulePath = _path2.default.relative(this.projectRoot, modulePath);
    const existingTarget = this.moduleMap[moduleName];
    if (!existingTarget || existingTarget === relativeModulePath) {
      return true;
    }

    return `${moduleName} is already mapped to ${existingTarget}`;
  }

  async add(moduleName, modulePath) {
    await this.load();

    const canAdd = await this.canAdd(moduleName, modulePath);

    if (!canAdd) {
      throw new _nodeUtils.Err(`Failed to add ${moduleName} to map because it is already mapped to ${this.moduleMap[moduleName]}`);
    }

    this.moduleMap[moduleName] = this.__genRelativePath(modulePath);
    this.moduleMap = sortObject(this.moduleMap);
    await this.write();
  }

  async removeModule(moduleName) {
    await this.load();

    if (!this.moduleMap[moduleName]) return;

    delete this.moduleMap[moduleName];
    await this.write();
  }

  async existingModuleName(modulePath) {
    await this.load();

    const relModulePath = await this.__genRelativePath(modulePath);

    for (const moduleName in this.moduleMap) {
      // TODO: remove this dependent on https://github.com/facebook/flow/issues/5777
      const typedModuleName = (0, _flowTypes.toTModuleName)(moduleName);

      if (this.moduleMap[typedModuleName] === relModulePath) {
        return typedModuleName;
      }
    }
  }
}, (_applyDecoratedDescriptor(_class.prototype, 'load', [_memoizedDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'load'), _class.prototype)), _class);
exports.default = ModuleMap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,