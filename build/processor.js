'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processFile = processFile;
exports.deleteLinksTo = deleteLinksTo;

require('source-map-support/register');

var _fileHandler = require('./file-handler');

var _fileHandler2 = _interopRequireDefault(_fileHandler);

var _moduleMap = require('./module-map');

var _moduleMap2 = _interopRequireDefault(_moduleMap);

var _fileLinker = require('./file-linker');

var _fileLinker2 = _interopRequireDefault(_fileLinker);

var _nodeUtils = require('node-utils');

var _fsUtils = require('./fs-utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const { genForEachNull } = _nodeUtils.arrayAsync;

const { genAllNull, genAllEnforce } = _nodeUtils.genAwait;

async function getProcessors(filePath) {
  const handler = new _fileHandler2.default(filePath);
  const [projectDir, workspaceDir] = await genAllNull(handler.genProjectDir(), handler.genWorkspaceDir());

  const workingDir = workspaceDir || projectDir;

  if (!workingDir) {
    return null;
  }

  const moduleMap = new _moduleMap2.default(workingDir);
  const fileLinker = new _fileLinker2.default(workingDir);

  return { moduleMap, fileLinker, all: [moduleMap, fileLinker] };
}

async function processFile(filePath) {
  const handler = new _fileHandler2.default(filePath);
  const [moduleName, processors] = await genAllNull(handler.genModuleName(), getProcessors(filePath));

  if (!processors) {
    throw new Error(`processFile did not receive any processors`);
  }

  const buildPath = (0, _fsUtils.getBuildPath)(filePath);
  const oldModuleName = await processors.moduleMap.existingModuleName(buildPath);

  if (oldModuleName && oldModuleName !== moduleName) {
    deleteLinksToModuleName(oldModuleName, processors);
  }
  if (!moduleName) return;

  const processorsCanAdd = await genAllEnforce(...processors.all.map(p => p.canAdd(moduleName, buildPath)));
  const canAddFile = processorsCanAdd.every(b => b === true);

  if (!canAddFile) {
    const reasons = [];
    processorsCanAdd.forEach(v => typeof v === 'string' && reasons.push(v));

    throw new Error(`Unable to link ${filePath} because ${reasons.join(', ')}`);
  }

  return genForEachNull(processors.all, processor => processor.add(moduleName, buildPath));
}

function deleteLinksToModuleName(moduleName, processors) {
  processors.all.forEach(processor => processor.removeModule(moduleName));
}

async function deleteLinksTo(filePath) {
  const processors = await getProcessors(filePath);

  if (!processors) return;
  processors;

  const oldModuleName = await processors.moduleMap.existingModuleName(filePath);
  if (!oldModuleName) return;

  deleteLinksToModuleName(oldModuleName, processors);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wcm9jZXNzb3IuanMiXSwibmFtZXMiOlsicHJvY2Vzc0ZpbGUiLCJkZWxldGVMaW5rc1RvIiwiZ2VuRm9yRWFjaE51bGwiLCJnZW5BbGxOdWxsIiwiZ2VuQWxsRW5mb3JjZSIsImdldFByb2Nlc3NvcnMiLCJmaWxlUGF0aCIsImhhbmRsZXIiLCJwcm9qZWN0RGlyIiwid29ya3NwYWNlRGlyIiwiZ2VuUHJvamVjdERpciIsImdlbldvcmtzcGFjZURpciIsIndvcmtpbmdEaXIiLCJtb2R1bGVNYXAiLCJmaWxlTGlua2VyIiwiYWxsIiwibW9kdWxlTmFtZSIsInByb2Nlc3NvcnMiLCJnZW5Nb2R1bGVOYW1lIiwiRXJyb3IiLCJidWlsZFBhdGgiLCJvbGRNb2R1bGVOYW1lIiwiZXhpc3RpbmdNb2R1bGVOYW1lIiwiZGVsZXRlTGlua3NUb01vZHVsZU5hbWUiLCJwcm9jZXNzb3JzQ2FuQWRkIiwibWFwIiwicCIsImNhbkFkZCIsImNhbkFkZEZpbGUiLCJldmVyeSIsImIiLCJyZWFzb25zIiwiZm9yRWFjaCIsInYiLCJwdXNoIiwiam9pbiIsInByb2Nlc3NvciIsImFkZCIsInJlbW92ZU1vZHVsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFpQ3NCQSxXLEdBQUFBLFc7UUFpQ0FDLGEsR0FBQUEsYTs7OztBQWhFdEI7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7O0FBQ0E7Ozs7QUFLQSxNQUFNLEVBQUVDLGNBQUYsMEJBQU47O0FBQ0EsTUFBTSxFQUFFQyxVQUFGLEVBQWNDLGFBQWQsd0JBQU47O0FBSUEsZUFBZUMsYUFBZixDQUE2QkMsUUFBN0IsRUFBNkU7QUFDM0UsUUFBTUMsVUFBVSwwQkFBZ0JELFFBQWhCLENBQWhCO0FBQ0EsUUFBTSxDQUFDRSxVQUFELEVBQWFDLFlBQWIsSUFBNkIsTUFBTU4sV0FBV0ksUUFBUUcsYUFBUixFQUFYLEVBQW9DSCxRQUFRSSxlQUFSLEVBQXBDLENBQXpDOztBQUVBLFFBQU1DLGFBQWFILGdCQUFnQkQsVUFBbkM7O0FBRUEsTUFBSSxDQUFDSSxVQUFMLEVBQWlCO0FBQ2YsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsUUFBTUMsWUFBWSx3QkFBY0QsVUFBZCxDQUFsQjtBQUNBLFFBQU1FLGFBQWEseUJBQWVGLFVBQWYsQ0FBbkI7O0FBRUEsU0FBTyxFQUFFQyxTQUFGLEVBQWFDLFVBQWIsRUFBeUJDLEtBQUssQ0FBQ0YsU0FBRCxFQUFZQyxVQUFaLENBQTlCLEVBQVA7QUFDRDs7QUFFTSxlQUFlZCxXQUFmLENBQTJCTSxRQUEzQixFQUFtRTtBQUN4RSxRQUFNQyxVQUFVLDBCQUFnQkQsUUFBaEIsQ0FBaEI7QUFDQSxRQUFNLENBQUNVLFVBQUQsRUFBYUMsVUFBYixJQUEyQixNQUFNZCxXQUFXSSxRQUFRVyxhQUFSLEVBQVgsRUFBb0NiLGNBQWNDLFFBQWQsQ0FBcEMsQ0FBdkM7O0FBRUEsTUFBSSxDQUFDVyxVQUFMLEVBQWlCO0FBQ2YsVUFBTSxJQUFJRSxLQUFKLENBQVcsNENBQVgsQ0FBTjtBQUNEOztBQUVELFFBQU1DLFlBQVksMkJBQWFkLFFBQWIsQ0FBbEI7QUFDQSxRQUFNZSxnQkFBZ0IsTUFBTUosV0FBV0osU0FBWCxDQUFxQlMsa0JBQXJCLENBQXdDRixTQUF4QyxDQUE1Qjs7QUFFQSxNQUFJQyxpQkFBaUJBLGtCQUFrQkwsVUFBdkMsRUFBbUQ7QUFDakRPLDRCQUF3QkYsYUFBeEIsRUFBdUNKLFVBQXZDO0FBQ0Q7QUFDRCxNQUFJLENBQUNELFVBQUwsRUFBaUI7O0FBRWpCLFFBQU1RLG1CQUFtQixNQUFNcEIsY0FBYyxHQUFHYSxXQUFXRixHQUFYLENBQWVVLEdBQWYsQ0FBbUJDLEtBQUtBLEVBQUVDLE1BQUYsQ0FBU1gsVUFBVCxFQUFxQkksU0FBckIsQ0FBeEIsQ0FBakIsQ0FBL0I7QUFDQSxRQUFNUSxhQUFhSixpQkFBaUJLLEtBQWpCLENBQXVCQyxLQUFLQSxNQUFNLElBQWxDLENBQW5COztBQUVBLE1BQUksQ0FBQ0YsVUFBTCxFQUFpQjtBQUNmLFVBQU1HLFVBQVUsRUFBaEI7QUFDQVAscUJBQWlCUSxPQUFqQixDQUF5QkMsS0FBSyxPQUFPQSxDQUFQLEtBQWEsUUFBYixJQUF5QkYsUUFBUUcsSUFBUixDQUFhRCxDQUFiLENBQXZEOztBQUVBLFVBQU0sSUFBSWQsS0FBSixDQUFXLGtCQUFpQmIsUUFBUyxZQUFXeUIsUUFBUUksSUFBUixDQUFhLElBQWIsQ0FBbUIsRUFBbkUsQ0FBTjtBQUNEOztBQUVELFNBQU9qQyxlQUFlZSxXQUFXRixHQUExQixFQUErQnFCLGFBQWFBLFVBQVVDLEdBQVYsQ0FBY3JCLFVBQWQsRUFBMEJJLFNBQTFCLENBQTVDLENBQVA7QUFDRDs7QUFFRCxTQUFTRyx1QkFBVCxDQUFpQ1AsVUFBakMsRUFBMERDLFVBQTFELEVBQW1GO0FBQ2pGQSxhQUFXRixHQUFYLENBQWVpQixPQUFmLENBQXVCSSxhQUFhQSxVQUFVRSxZQUFWLENBQXVCdEIsVUFBdkIsQ0FBcEM7QUFDRDs7QUFFTSxlQUFlZixhQUFmLENBQTZCSyxRQUE3QixFQUFzRDtBQUMzRCxRQUFNVyxhQUFhLE1BQU1aLGNBQWNDLFFBQWQsQ0FBekI7O0FBRUEsTUFBSSxDQUFDVyxVQUFMLEVBQWlCO0FBQ2pCQTs7QUFFQSxRQUFNSSxnQkFBZ0IsTUFBTUosV0FBV0osU0FBWCxDQUFxQlMsa0JBQXJCLENBQXdDaEIsUUFBeEMsQ0FBNUI7QUFDQSxNQUFJLENBQUNlLGFBQUwsRUFBb0I7O0FBRXBCRSwwQkFBd0JGLGFBQXhCLEVBQXVDSixVQUF2QztBQUNEIiwiZmlsZSI6InByb2Nlc3Nvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCBGaWxlSGFuZGxlciBmcm9tICcuL2ZpbGUtaGFuZGxlcic7XG5pbXBvcnQgTW9kdWxlTWFwIGZyb20gJy4vbW9kdWxlLW1hcCc7XG5pbXBvcnQgRmlsZUxpbmtlciBmcm9tICcuL2ZpbGUtbGlua2VyJztcblxuaW1wb3J0IHsgZ2VuQXdhaXQsIGFycmF5QXN5bmMgfSBmcm9tICdub2RlLXV0aWxzJztcbmltcG9ydCB7IGdldEJ1aWxkUGF0aCB9IGZyb20gJy4vZnMtdXRpbHMnO1xuXG5pbXBvcnQgdHlwZSB7IHRBYnNvbHV0ZVBhdGgsIHRNb2R1bGVOYW1lIH0gZnJvbSAnZmxvdy10eXBlcyc7XG5pbXBvcnQgdHlwZSB7IElNb2R1bGVNYXAgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG5jb25zdCB7IGdlbkZvckVhY2hOdWxsIH0gPSBhcnJheUFzeW5jO1xuY29uc3QgeyBnZW5BbGxOdWxsLCBnZW5BbGxFbmZvcmNlIH0gPSBnZW5Bd2FpdDtcblxudHlwZSB0UHJvY2Vzc29ycyA9IHsgbW9kdWxlTWFwOiBNb2R1bGVNYXAsIGZpbGVMaW5rZXI6IEZpbGVMaW5rZXIsIGFsbDogQXJyYXk8SU1vZHVsZU1hcD4gfTtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0UHJvY2Vzc29ycyhmaWxlUGF0aDogdEFic29sdXRlUGF0aCk6IFByb21pc2U8P3RQcm9jZXNzb3JzPiB7XG4gIGNvbnN0IGhhbmRsZXIgPSBuZXcgRmlsZUhhbmRsZXIoZmlsZVBhdGgpO1xuICBjb25zdCBbcHJvamVjdERpciwgd29ya3NwYWNlRGlyXSA9IGF3YWl0IGdlbkFsbE51bGwoaGFuZGxlci5nZW5Qcm9qZWN0RGlyKCksIGhhbmRsZXIuZ2VuV29ya3NwYWNlRGlyKCkpO1xuXG4gIGNvbnN0IHdvcmtpbmdEaXIgPSB3b3Jrc3BhY2VEaXIgfHwgcHJvamVjdERpcjtcblxuICBpZiAoIXdvcmtpbmdEaXIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IG1vZHVsZU1hcCA9IG5ldyBNb2R1bGVNYXAod29ya2luZ0Rpcik7XG4gIGNvbnN0IGZpbGVMaW5rZXIgPSBuZXcgRmlsZUxpbmtlcih3b3JraW5nRGlyKTtcblxuICByZXR1cm4geyBtb2R1bGVNYXAsIGZpbGVMaW5rZXIsIGFsbDogW21vZHVsZU1hcCwgZmlsZUxpbmtlcl0gfTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NGaWxlKGZpbGVQYXRoOiB0QWJzb2x1dGVQYXRoKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IGhhbmRsZXIgPSBuZXcgRmlsZUhhbmRsZXIoZmlsZVBhdGgpO1xuICBjb25zdCBbbW9kdWxlTmFtZSwgcHJvY2Vzc29yc10gPSBhd2FpdCBnZW5BbGxOdWxsKGhhbmRsZXIuZ2VuTW9kdWxlTmFtZSgpLCBnZXRQcm9jZXNzb3JzKGZpbGVQYXRoKSk7XG5cbiAgaWYgKCFwcm9jZXNzb3JzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBwcm9jZXNzRmlsZSBkaWQgbm90IHJlY2VpdmUgYW55IHByb2Nlc3NvcnNgKTtcbiAgfVxuXG4gIGNvbnN0IGJ1aWxkUGF0aCA9IGdldEJ1aWxkUGF0aChmaWxlUGF0aCk7XG4gIGNvbnN0IG9sZE1vZHVsZU5hbWUgPSBhd2FpdCBwcm9jZXNzb3JzLm1vZHVsZU1hcC5leGlzdGluZ01vZHVsZU5hbWUoYnVpbGRQYXRoKTtcblxuICBpZiAob2xkTW9kdWxlTmFtZSAmJiBvbGRNb2R1bGVOYW1lICE9PSBtb2R1bGVOYW1lKSB7XG4gICAgZGVsZXRlTGlua3NUb01vZHVsZU5hbWUob2xkTW9kdWxlTmFtZSwgcHJvY2Vzc29ycyk7XG4gIH1cbiAgaWYgKCFtb2R1bGVOYW1lKSByZXR1cm47XG5cbiAgY29uc3QgcHJvY2Vzc29yc0NhbkFkZCA9IGF3YWl0IGdlbkFsbEVuZm9yY2UoLi4ucHJvY2Vzc29ycy5hbGwubWFwKHAgPT4gcC5jYW5BZGQobW9kdWxlTmFtZSwgYnVpbGRQYXRoKSkpO1xuICBjb25zdCBjYW5BZGRGaWxlID0gcHJvY2Vzc29yc0NhbkFkZC5ldmVyeShiID0+IGIgPT09IHRydWUpO1xuXG4gIGlmICghY2FuQWRkRmlsZSkge1xuICAgIGNvbnN0IHJlYXNvbnMgPSBbXTtcbiAgICBwcm9jZXNzb3JzQ2FuQWRkLmZvckVhY2godiA9PiB0eXBlb2YgdiA9PT0gJ3N0cmluZycgJiYgcmVhc29ucy5wdXNoKHYpKTtcblxuICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGxpbmsgJHtmaWxlUGF0aH0gYmVjYXVzZSAke3JlYXNvbnMuam9pbignLCAnKX1gKTtcbiAgfVxuXG4gIHJldHVybiBnZW5Gb3JFYWNoTnVsbChwcm9jZXNzb3JzLmFsbCwgcHJvY2Vzc29yID0+IHByb2Nlc3Nvci5hZGQobW9kdWxlTmFtZSwgYnVpbGRQYXRoKSk7XG59XG5cbmZ1bmN0aW9uIGRlbGV0ZUxpbmtzVG9Nb2R1bGVOYW1lKG1vZHVsZU5hbWU6IHRNb2R1bGVOYW1lLCBwcm9jZXNzb3JzOiB0UHJvY2Vzc29ycykge1xuICBwcm9jZXNzb3JzLmFsbC5mb3JFYWNoKHByb2Nlc3NvciA9PiBwcm9jZXNzb3IucmVtb3ZlTW9kdWxlKG1vZHVsZU5hbWUpKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUxpbmtzVG8oZmlsZVBhdGg6IHRBYnNvbHV0ZVBhdGgpIHtcbiAgY29uc3QgcHJvY2Vzc29ycyA9IGF3YWl0IGdldFByb2Nlc3NvcnMoZmlsZVBhdGgpO1xuXG4gIGlmICghcHJvY2Vzc29ycykgcmV0dXJuO1xuICBwcm9jZXNzb3JzO1xuXG4gIGNvbnN0IG9sZE1vZHVsZU5hbWUgPSBhd2FpdCBwcm9jZXNzb3JzLm1vZHVsZU1hcC5leGlzdGluZ01vZHVsZU5hbWUoZmlsZVBhdGgpO1xuICBpZiAoIW9sZE1vZHVsZU5hbWUpIHJldHVybjtcblxuICBkZWxldGVMaW5rc1RvTW9kdWxlTmFtZShvbGRNb2R1bGVOYW1lLCBwcm9jZXNzb3JzKTtcbn1cbiJdfQ==